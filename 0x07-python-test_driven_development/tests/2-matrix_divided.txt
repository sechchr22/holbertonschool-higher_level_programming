#doctest_for_matrix_divided

matrix_divided: function that divides all elements of a matrix.

- matrix must be a list of lists of integers or floats, otherwise raise a TypeError exception with the message 
matrix must be a matrix (list of lists) of integers/floats
- Each row of the matrix must be of the same size, otherwise raise a TypeError exception with the message Each row of the matrix must have the same size
- div must be a number (integer or float), otherwise raise a TypeError exception with the message div must be a number
- div cant be equal to 0, otherwise raise a ZeroDivisionError exception with the message division by zero
- All elements of the matrix should be divided by div, rounded to 2 decimal places
- Returns a new matrix

Tests:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix_divided(matrix, 1.5)
[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]
>>> matrix_divided(matrix, -1)
[[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]
>>> matrix_divided(matrix, -1.5)
[[-0.67, -1.33, -2.0], [-2.67, -3.33, -4.0]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided(matrix, 'a')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided(matrix, [1])
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_dif_size = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix_dif_size, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_with_character = [[1, 'a', 3], [4, 5, 6]]
>>> matrix_divided(matrix_with_character, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_with_tuple = [[1, (7, 8), 3], [4, 5, 6]]
>>> matrix_divided(matrix_with_tuple, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix
[[1, 2, 3], [4, 5, 6]]
